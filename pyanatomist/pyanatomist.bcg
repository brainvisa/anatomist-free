
class PyAnatomist( GenericMakerComponent ):
  _name = 'pyanatomist'

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      source = os.path.join( self.sourceDir(), 'src', 'sip' )
      if buildconfigVersion < 2.0:
        build = os.path.join( self.buildDir(), 'src', 'sip' )
      else:
        build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
      self._data[ 'sipinclude' ] = [ '-I', build, '-I', source ]
      self._data[ 'sipinclude' ] = SipComponent.sipinclude( self )

  def dependencies( self ):
    return [ 'anatomist', PyQtComponent, 'pyaims', 'soma' ]

  def build( self, instances ):
    if not self._found or self._data[ 'enabled' ] == '0':
      return
    # genrate SIP files from templates
    source = os.path.join( self.sourceDir(), 'src', 'sip' )
    build = os.path.join( self.componentBuildDir(), 'src', 'sip' )
    cwd = os.getcwd()
    os.chdir( source )
    pyaims = getInstance( PyAimsComponent )
    pad = os.path.join( pyaims.sourceDir(), 'src', 'sip' )
    res = os.system( sys.executable + ' "' \
                + os.path.join( pad, 'maketemplates.py' ) + '" -s "' + pad \
                + '" -t "' + os.path.join( pad, 'typessub.py' ) \
                + '" -t anatypessub.py -i generatedtypes.py -c -o "' \
                + build + '"' )
    if res != 0:
      raise RuntimeError( 'maketemplates.py failed: return code:' \
        + str( res ) )
    print 'maketemplates result:', res
    os.chdir( cwd )
    # regular build
    GenericMakerComponent.build( self, instances )


  def doEpydoc( self ):
    return True

  def pythonModule( self ):
    return 'anatomist'



