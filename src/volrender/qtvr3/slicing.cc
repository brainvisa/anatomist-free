#include "slicing.h"


static float vertex[ 8 ][ 3 ] = 
{

  { 0.0f, 0.0f, 0.0f },
  { 1.0f, 0.0f, 0.0f },
  { 0.0f, 1.0f, 0.0f },
  { 1.0f, 1.0f, 0.0f },
  { 0.0f, 0.0f, 1.0f },
  { 1.0f, 0.0f, 1.0f },
  { 0.0f, 1.0f, 1.0f },
  { 1.0f, 1.0f, 1.0f }

};


static int edge[ 12 ][ 2 ] =
{

  { 0, 1 },
  { 4, 5 },
  { 2, 3 },
  { 6, 7 },
  { 0, 2 },
  { 4, 6 },
  { 1, 3 },
  { 5, 7 },
  { 0, 4 },
  { 2, 6 },
  { 1, 5 },
  { 3, 7 }

};


static int intersection[ 256 ][ 8 ] =
{

  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  4,  8, -1, -1, -1, -1, -1 },
  {  0, 10,  6, -1, -1, -1, -1, -1 },
  {  4,  8, 10,  6, -1, -1, -1, -1 },
  {  4,  2,  9, -1, -1, -1, -1, -1 },
  {  0,  2,  9,  8, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  8,  9,  2,  6, 10, -1, -1, -1 },
  {  6, 11,  2, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0, 10, 11,  2, -1, -1, -1, -1 },
  { 10,  8,  4,  2, 11, -1, -1, -1 },
  {  4,  6, 11,  9, -1, -1, -1, -1 },
  {  9, 11,  6,  0,  8, -1, -1, -1 },
  { 11, 10,  0,  4,  9, -1, -1, -1 },
  {  8, 10, 11,  9, -1, -1, -1, -1 },
  {  8,  5,  1, -1, -1, -1, -1, -1 },
  {  0,  4,  5,  1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  4,  6, 10,  1,  5, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  1,  5,  9,  2, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1, 10,  6,  2,  9,  5, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { 11,  9,  5,  1, 10, -1, -1, -1 },
  { 10,  1,  7, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  1,  7,  6, -1, -1, -1, -1 },
  {  6,  7,  1,  8,  4, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  2, 11,  7,  1, -1, -1, -1 },
  {  1,  7, 11,  2,  4,  8, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  9,  8,  1,  7, 11, -1, -1, -1 },
  {  5,  7, 10,  8, -1, -1, -1, -1 },
  {  5,  4,  0, 10,  7, -1, -1, -1 },
  {  7,  5,  8,  0,  6, -1, -1, -1 },
  {  4,  5,  7,  6, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  7,  6,  2,  9,  5, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  5,  7, 11,  2,  4, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  5,  7, 11,  9, -1, -1, -1, -1 },
  {  9,  3,  5, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  3,  5,  4, -1, -1, -1, -1 },
  {  2,  0,  8,  5,  3, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  4,  5,  3, 11,  6, -1, -1, -1 },
  {  0,  6, 11,  3,  5,  8, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { 10, 11,  3,  5,  8, -1, -1, -1 },
  {  1,  8,  9,  3, -1, -1, -1, -1 },
  {  1,  3,  9,  4,  0, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  3,  2,  4,  8,  1, -1, -1, -1 },
  {  0,  2,  3,  1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  3,  1, 10,  6,  2, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  0,  6, 11,  3, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1, 10, 11,  3, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  8, 10,  7,  3,  9, -1, -1, -1 },
  {  0,  4,  9,  3,  7, 10, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  6,  4,  9,  3,  7, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  3,  7, 10,  0, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  3,  7,  6, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { 11,  3,  7, -1, -1, -1, -1, -1 },
  { 11,  7,  3, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  6,  7,  3, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  0, 10,  7,  3, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  6,  7,  3,  9,  4, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0, 10,  7,  3,  9,  4, -1, -1 },
  {  8,  9,  3,  7, 10, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  3, 11, 10, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  3, 11,  6,  0, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  3,  2,  6, 10,  1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  1,  3,  2, -1, -1, -1, -1 },
  {  3,  1,  8,  4,  2, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  0,  4,  9,  3, -1, -1, -1 },
  {  1,  3,  9,  8, -1, -1, -1, -1 },
  { 10,  8,  5,  3, 11, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  8,  5,  3, 11,  6, -1, -1 },
  {  4,  6, 11,  3,  5, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  2,  3,  5,  8,  0, -1, -1, -1 },
  {  2,  4,  5,  3, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  9,  5,  3, -1, -1, -1, -1, -1 },
  {  5,  9, 11,  7, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  5,  4,  2, 11,  7, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  7,  5,  9,  2,  6, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  4,  6,  7,  5, -1, -1, -1, -1 },
  {  7,  6,  0,  8,  5, -1, -1, -1 },
  {  5,  7, 10,  0,  4, -1, -1, -1 },
  {  5,  8, 10,  7, -1, -1, -1, -1 },
  {  9, 11,  7,  1,  8, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  8,  4,  2, 11,  7, -1, -1 },
  {  0,  1,  7, 11,  2, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  6,  4,  8,  1,  7, -1, -1, -1 },
  {  0,  6,  7,  1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { 10,  7,  1, -1, -1, -1, -1, -1 },
  { 11, 10,  1,  5,  9, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  1,  5,  9,  2,  6, 10, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  2,  9,  5,  1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  4,  5,  1, 10,  6, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  1,  5,  4, -1, -1, -1, -1 },
  {  8,  1,  5, -1, -1, -1, -1, -1 },
  {  8,  9, 11, 10, -1, -1, -1, -1 },
  { 11,  9,  4,  0, 10, -1, -1, -1 },
  {  9,  8,  0,  6, 11, -1, -1, -1 },
  {  4,  9, 11,  6, -1, -1, -1, -1 },
  { 10, 11,  2,  4,  8, -1, -1, -1 },
  {  0,  2, 11, 10, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  6,  2, 11, -1, -1, -1, -1, -1 },
  {  8, 10,  6,  2,  9, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 },
  {  0,  8,  9,  2, -1, -1, -1, -1 },
  {  4,  9,  2, -1, -1, -1, -1, -1 },
  {  4,  6, 10,  8, -1, -1, -1, -1 },
  {  0,  6, 10, -1, -1, -1, -1, -1 },
  {  0,  8,  4, -1, -1, -1, -1, -1 },
  { -1, -1, -1, -1, -1, -1, -1, -1 }

};



Vr::Slicing::Slicing() 
  : maxNbSlices( 512 )
{
}


void Vr::Slicing::setMaxSlices( int n )
{

  maxNbSlices = n;

}


std::list< Vr::Vector3d > Vr::Slicing::getSlice( const float* m, float z )
{

  slices.clear();
  cubeZBuffer.compute( m );

  if ( z >= cubeZBuffer.getMinZ() && z <= cubeZBuffer.getMaxZ() )
  {

    getOneSlice( z );
    return slices.find( z )->second;

  }

  return std::list< Vector3d >();

}


std::map< float, std::list< Vr::Vector3d > >& 
Vr::Slicing::getSlices( const float* m )
{

  slices.clear();
  cubeZBuffer.compute( m );

  float step = cubeZBuffer.getStep( maxNbSlices );
  float z = cubeZBuffer.getMinZ();

  while ( z <= cubeZBuffer.getMaxZ() )
  {

    getOneSlice( z );
    z += step;

  }

  return slices;

}


std::map< float, std::list< Vr::Vector3d > >& 
Vr::Slicing::getSlab( const float* m, float z, int n )
{

  slices.clear();

  if ( n > maxNbSlices )
  {

    n = maxNbSlices;

  }

  cubeZBuffer.compute( m );
  float step = cubeZBuffer.getStep( maxNbSlices );
  float z0 = z - step * (float)( n / 2 );
  float z1 = z + step * (float)( n / 2 );

  if ( z0 < cubeZBuffer.getMinZ() )
  {

    z0 = cubeZBuffer.getMinZ();

  }

  if ( z1 > cubeZBuffer.getMaxZ() )
  {

    z1 = cubeZBuffer.getMaxZ();

  }

  while ( z0 <= z1 )
  {

    getOneSlice( z0 );
    z0 += step;

  }

  return slices;

}


void Vr::Slicing::getOneSlice( float z )
{

  int e, i, key = cubeZBuffer.getKey( z );

  if ( intersection[ key ][ 0 ] >= 0 )
  {

    std::list< Vr::Vector3d > v;
    i = 0;

    while ( ( e = intersection[ key ][ i++ ] ) >= 0 )
    {

      float z0 = cubeZBuffer.getVertexZ( edge[ e ][ 0 ] );
      float z1 = cubeZBuffer.getVertexZ( edge[ e ][ 1 ] );

      switch ( e )
      {

      case 0:
      case 1:
      case 2:
      case 3:
        v.push_back( Vr::Vector3d( ( z - z0 ) / ( z1 - z0 ),
                                   vertex[ edge[ e ][ 0 ] ][ 1 ],
                                   vertex[ edge[ e ][ 0 ] ][ 2 ] ) );
        break;

      case 4:
      case 5:
      case 6:
      case 7:
        v.push_back( Vr::Vector3d( vertex[ edge[ e ][ 0 ] ][ 0 ],
                                   ( z - z0 ) / ( z1 - z0 ),
                                   vertex[ edge[ e ][ 0 ] ][ 2 ] ) );
        break;

      case 8:
      case 9:
      case 10:
      case 11:
        v.push_back( Vr::Vector3d( vertex[ edge[ e ][ 0 ] ][ 0 ],
                                   vertex[ edge[ e ][ 0 ] ][ 1 ],
                                   ( z - z0 ) / ( z1 - z0 ) ) );

      default:
        break;

      }

    }

    slices.insert( std::make_pair( z, v ) );

  }

}
