/* This software and supporting documentation are distributed by
 *     CEA/NeuroSpin, Batiment 145,
 *     91191 Gif-sur-Yvette cedex
 *     France
 *
 * This software is governed by the CeCILL-B license under
 * French law and abiding by the rules of distribution of free software.
 * You can  use, modify and/or redistribute the software under the
 * terms of the CeCILL-B license as circulated by CEA, CNRS
 * and INRIA at the following URL "http://www.cecill.info".
 *
 * As a counterpart to the access to the source code and  rights to copy,
 * modify and redistribute granted by the license, users are provided only
 * with a limited warranty  and the software's author,  the holder of the
 * economic rights,  and the successive licensors  have only  limited
 * liability.
 *
 * In this respect, the user's attention is drawn to the risks associated
 * with loading,  using,  modifying and/or developing or reproducing the
 * software by the user in light of its specific status of free software,
 * that may mean  that it is complicated to manipulate,  and  that  also
 * therefore means  that it is reserved for developers  and  experienced
 * professionals having in-depth computer knowledge. Users are therefore
 * encouraged to load and test the software's suitability as regards their
 * requirements in conditions enabling the security of their systems and/or
 * data to be ensured and,  more generally, to use and operate it in the
 * same conditions as regards security.
 *
 * The fact that you are presently reading this means that you have had
 * knowledge of the CeCILL-B license and that you accept its terms.
 */


#ifndef DYNAMIC_SHADER_BUILDER_H
#define DYNAMIC_SHADER_BUILDER_H

#include <string>
#include <vector>

#include "IShaderModule.h"

namespace anatomist
{
  class dynamicShaderBuilder
  {
    /** This class is made to dynamically build a shader program. It allows to set the version of the shader,
      * the base template of the shader, the illumination model and the effects that will be applied to the shader.
      * The shader source code is generated by replacing the tags in the base template.
      * The Illumination Model is applied first, then the effects are applied in the order they were added.
    */
    public:
      dynamicShaderBuilder();

      /// Sets the version of the shader
      void setVersion(int version);
      /// Sets the string template of the shader, it may contain tags ({Illumination Model Uniforms}, {Illumination Model Function}, {Illumination Model Call}, {Effect Uniforms}, {Effect Functions}, {Effect Call}) that will be replaced by the shader modules.
      void setBaseTemplate(const std::string &templateSource);
      /// Sets the illumination model used in the shader
      void setIlluminationModel(std::unique_ptr<IShaderModule> model);
      /// Adds an effect to the list of effects that will be applied to the shader
      void addEffect(std::unique_ptr<IShaderModule> effect);
      /// Generates the shader source code by replacing the tags in the base template
      std::string readShaderFile(const std::string &filePath);
      /// Returns the base template of the shader with the version added at the top
      std::string generateShaderSource() const;
    
    private:
      std::string m_baseShaderTemplate;
      std::unique_ptr<IShaderModule> m_illuminationModel = nullptr;
      std::vector<std::unique_ptr<IShaderModule>> m_effects;
      int m_version;
  };
}

#endif // DYNAMIC_SHADER_BUILDER_H

