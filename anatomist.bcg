import traceback
import os, stat

#-----------------------------------------------------------------------------
class AnatomistComponent( GenericMakerComponent ):
  _name = 'anatomist'

  optionsDescription = GenericMakerComponent.optionsDescription.copy()
  optionsDescription.update( {
    'anaalgo': ( None, 'configure/build aimsalgo-dependant modules (default: yes)' ), 
    'anaqwt': ( None, 'configure/build Qwt-dependant modules (default: yes)' ), 
    'anavtk': ( None, 'configure/build Vtk-dependant modules (default: yes)' ),
  } )

  def __init__( self, options ):
    GenericMakerComponent.__init__( self, options )
    # Default options values
    self.setDefaultOption( 'anaalgo', 1 )
    self.setDefaultOption( 'anaqwt', 1 )
    self.setDefaultOption( 'anavtk', 1 )

  def postInit( self ):
    if not self._initialized:
      GenericMakerComponent.postInit( self )
      global componentsToBuild
      try:
        pa = getInstance( 'pyanatomist' )
        if pa:
          pa.postInit()
          if weakDependency( 'pyanatomist' ):
            componentsToBuild.append( 'pyanatomist' )
      except Exception, e:
        print e
      try:
        af = getInstance( 'anafold' )
        if af:
          af.postInit()
          if weakDependency( 'anafold' ):
            componentsToBuild.append( 'anafold' )
      except Exception, e:
        print e

  def weakDependencies( self ):
    res = []
    algo = 0
    if int( self.getOption( 'anaalgo', 0 ) ) \
      and weakDependency( AnatomistAlgoComponent, self ):
      res.append( AnatomistAlgoComponent )
      algo = 1
    if int( self.getOption( 'anaqwt', 0 ) ) \
      and weakDependency( AnatomistQwtComponent, self ):
      res.append( AnatomistQwtComponent )
      if algo:
        res.append( AnatomistPerfusionComponent )
    if int( self.getOption( 'anavtk', 0 ) ) \
      and weakDependency( AnatomistVtkComponent, self ):
      res.append( AnatomistVtkComponent )
    return res

  def dependencies( self ):
    if systemname != 'darwin' or x11:
      return [ 'aimsgui(aims-gpl)', LibZComponent, GLUComponent ]
    else:
      return [ 'aimsgui(aims-gpl)', LibZComponent, OpenGLComponent ]

  def _libraries( self ):
      return [ 'anatomist' ]

  def beforeVersionChange( self, newver, perforce ):
    # change script shared/scripts/anatomist
    self.updateAnatomistScript( 'main', 'stable', perforce )
    perforce.p4submit( self._name + ', stable version',
                       perforce.p4opened( os.path.join( self.sourceDir(),
                                                        '...' ) ) )

  def atVersionChange( self, newver, perforce ):
    source = self.get( 'sources' )
    ver = self.get( 'version' )
    
    # change script shared/scripts/anatomist
    self.updateAnatomistScript( 'stable', 'main', perforce )

    # TODO: change news file shared/po/fr/new.html

  def updateAnatomistScript( self, old, new, perforce ):
    src = os.path.join( self.get( 'sources' ),
                        'shared/scripts/anatomist' )
    perforce.p4edit( src )
    f = open( src, 'r' )
    txt = re.sub( old, new, f.read() )
    f.close()
    # rewrite file
    f = open( src, 'w' )
    f.write( txt )
    f.close()


  def filesToPack( self ):
    if self.getOption( 'i2bm', False ):
      exclude = None
    else:
      exclude = FileNameFilter( 'lib/libanahierarchyeditor.*', 
                              )
    for f in GenericMakerComponent.filesToPack( self ):
      if exclude is None or not exclude.match( f ):
        yield f


  def package( self ):
    GenericMakerComponent.package( self )
    if systemname == 'windows':
      exe = '.exe'
    else:
      exe = ''
    prefix = os.path.join( packageDir(), 'bin' )
    if systemname == 'darwin' and not x11:
      guis = [ 'anatomist' ]
      icon = os.path.join( self.buildDir(), self.shareDir(), 'icons', self._name + '.icns' )
      qt = getInstance( QtComponent )
      if not os.path.exists( icon ):
        icon = None
      for x in guis:
        qt.installMacOSApp( self, prefix, os.path.join( prefix, x ), icon )

  def packageDocs( self ):
    doc = os.path.join( self.buildDir(), self.docDir() )
    if doc and os.path.exists( doc ):
      docs = []
      packs = self.getOption( 'pack', [] )
      symlinks = self.getOption( 'symlinks' )
      dstdoc = os.path.join( packageDir(), self.docDir() )
      if 'userdoc' in packs:
        docs = [ 'ana_man' ]
        if 'private' in packs:
          # the training doc is still unstable - will be in next version
          docs += [ 'ana_training' ]
      if 'progdoc' in packs:
        docs += ['doxygen' ]
      for d in docs:
        if os.path.isdir( os.path.join( doc, d ) ):
          copyDirectory( os.path.join( doc, d ), os.path.join( dstdoc, d ),
                         symlinks=symlinks )


#-----------------------------------------------------------------------------
class VtkComponent( SystemComponent ):
  _name = 'vtk'
  _includeFile = 'QVTKWidget.h'
  _libFile = 'libvtkCommon'

  def findInclude( self ):
    search = []
    for x in self.searchPath():
      g = glob.glob( os.path.join( x, 'include', 'vtk' ) )
      if g:
        search += g
    inc = findInPath( None, self._includeFile, None, search )
    if not inc:
      search = []
      for x in self.searchPath():
        g = glob.glob( os.path.join( x, 'include', 'vtk*' ) )
        if g:
          search += g
      inc = findInPath( None, self._includeFile, None, search )
    if inc:
      self._data[ 'include' ] = inc
      self._found = 1
    else:
      SystemComponent.findInclude( self )

  def _libraries( self ):
    return [ 'QVTK', 'vtkHybrid' ]

#-----------------------------------------------------------------------------
class AnatomistAlgoComponent( GenericMakerModuleComponent ):
  _name = 'anaalgo'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ 'aimsalgo', AnatomistComponent ]

  def _libraries( self ):
    return []

#-----------------------------------------------------------------------------
class AnatomistQwtComponent( GenericMakerModuleComponent ):
  _name = 'anaqwt'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ QwtComponent, AnatomistComponent ]

  def weakDependencies( self ):
    return [ AnatomistProfileComponent, AnatomistRoiBaseComponent ]

  def _libraries( self ):
    return []

#-----------------------------------------------------------------------------
class AnatomistProfileComponent( GenericMakerModuleComponent ):
  _name = 'anaprofile'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ AnatomistQwtComponent ]

#-----------------------------------------------------------------------------
class AnatomistPerfusionComponent( GenericMakerModuleComponent ):
  _name = 'anaperfusion'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ AnatomistProfileComponent, AnatomistAlgoComponent ]

#-----------------------------------------------------------------------------
class AnatomistRoiBaseComponent( GenericMakerModuleComponent ):
  _name = 'anaroibase'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ AnatomistQwtComponent ]

#-----------------------------------------------------------------------------
class AnatomistVtkComponent( GenericMakerModuleComponent ):
  _name = 'anavtk'

  def sourceName( self ):
    return 'anatomist'

  def dependencies( self ):
    return [ AnatomistComponent, VtkComponent ]

#-----------------------------------------------------------------------------

modules = [ 'pyanatomist', 'anafold' ]

currentComponentDirectory = os.path.dirname( currentComponentFile )
for component in modules:
    c = options.setdefault( component, {} )
    c[ 'source' ] = os.path.join( currentComponentDirectory, component )
    c[ 'version' ] = '4.0'
#  print c
