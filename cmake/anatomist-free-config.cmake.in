# Defines the following variables:
#   @PROJECT_NAME@_VERSION_MAJOR
#   @PROJECT_NAME@_VERSION_MINOR
#   @PROJECT_NAME@_VERSION_PATCH
#   @PROJECT_NAME@_VERSION
#   @PROJECT_NAME_UPPER@_BINARY_DIR
#   @PROJECT_NAME_UPPER@_DEFINITIONS
#   @PROJECT_NAME_UPPER@_INCLUDE_DIRS
#   @PROJECT_NAME_UPPER@_LIBRARIES
#   @PROJECT_NAME_UPPER@_USE_FILE
#   @PROJECT_NAME_UPPER@_FOUND

# Set version variables
set( @PROJECT_NAME@_VERSION_MAJOR @BRAINVISA_PACKAGE_VERSION_MAJOR@ )
set( @PROJECT_NAME@_VERSION_MINOR @BRAINVISA_PACKAGE_VERSION_MINOR@ )
set( @PROJECT_NAME@_VERSION_PATCH @BRAINVISA_PACKAGE_VERSION_PATCH@ )
set( @PROJECT_NAME@_VERSION @BRAINVISA_PACKAGE_VERSION_MAJOR@.@BRAINVISA_PACKAGE_VERSION_MINOR@.@BRAINVISA_PACKAGE_VERSION_PATCH@ )
if ( NO_BV_MAKER )
  # Set @PROJECT_NAME_UPPER@_BINARY_DIR
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
  # Set use file
  set( @PROJECT_NAME_UPPER@_USE_FILE "${@PROJECT_NAME_UPPER@_BINARY_DIR}/cmake/@PROJECT_NAME@-use.cmake" )
else()
  # Set @PROJECT_NAME_UPPER@_BINARY_DIR
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH )
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
  get_filename_component( @PROJECT_NAME_UPPER@_BINARY_DIR "${@PROJECT_NAME_UPPER@_BINARY_DIR}" PATH )
  # Set use file
  set( @PROJECT_NAME_UPPER@_USE_FILE "${@PROJECT_NAME_UPPER@_BINARY_DIR}/share/@PROJECT_NAME@-@BRAINVISA_PACKAGE_VERSION_MAJOR@.@BRAINVISA_PACKAGE_VERSION_MINOR@/cmake/@PROJECT_NAME@-use.cmake" )
endif()

BRAINVISA_FIND_PACKAGE( aims-free REQUIRED )

if( DESIRED_QT_VERSION EQUAL 4 )
  find_package( Qt4 COMPONENTS QtCore QtGui QtOpenGL QtNetwork REQUIRED )
  find_package( VTK QUIET )
  if( VTK_FOUND )
    find_package( vtkINRIA3D QUIET )
  endif( VTK_FOUND )
elseif( DESIRED_QT_VERSION EQUAL 5 )
  find_package( Qt5Widgets REQUIRED )
  find_package( Qt5OpenGL REQUIRED )
  find_package( Qt5Network REQUIRED )
  find_package( Qt5Multimedia )
  add_definitions( ${Qt5Widgets_DEFINITIONS} ${Qt5OpenGL_DEFINITIONS}
    ${Qt5Network_DEFINITIONS} ${Qt5Multimedia_DEFINITIONS} )
  include_directories( ${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS}
    ${Qt5Network_INCLUDE_DIRS} ${Qt5Multimedia_INCLUDE_DIRS} )
  set( QT_LIBRARIES ${Qt5Widgets_LIBRARIES} ${Qt5OpenGL_LIBRARIES}
    ${Qt5Network_LIBRARIES} ${Qt5Multimedia_LIBRARIES} )
elseif( DESIRED_QT_VERSION EQUAL 6 )
  find_package( Qt6 REQUIRED COMPONENTS Widgets OpenGL Network Multimedia )
  add_definitions( ${Qt6Core_DEFINITIONS} ${Qt6Widgets_DEFINITIONS}
                   ${Qt6OpenGL_DEFINITIONS} ${Qt6Network_DEFINITIONS}
                   ${Qt6Multimedia_DEFINITIONS})
  include_directories( ${Qt6Core_INCLUDE_DIRS} ${Qt6Widgets_INCLUDE_DIRS}
                       ${Qt6OpenGL_INCLUDE_DIRS} ${Qt6Network_INCLUDE_DIRS}
                       ${Qt6Multimedia_INCLUDE_DIRS} )
  set( QT_LIBRARIES ${Qt6Widgets_LIBRARIES} ${Qt6OpenGL_LIBRARIES}
                    ${Qt6Network_LIBRARIES} ${Qt6Multimedia_LIBRARIES} )
endif()

find_package( OpenGL REQUIRED )
find_package( Qwt )
find_package( python )
if( PYTHON_FOUND )
  find_package( SIP )
endif()
set( @PROJECT_NAME_UPPER@_DEFINITIONS @ANATOMIST_DEFINITIONS@ )

if( @PROJECT_NAME@_IS_BEING_COMPILED )
  set( @PROJECT_NAME_UPPER@_LIBRARY anatomist )
else( @PROJECT_NAME@_IS_BEING_COMPILED )
  find_library( @PROJECT_NAME_UPPER@_LIBRARY anatomist
                "${@PROJECT_NAME_UPPER@_BINARY_DIR}"
                PATH_SUFFIXES ${BRAINVISA_CMAKE_LIBRARY_PATH_SUFFIXES} )
endif( @PROJECT_NAME@_IS_BEING_COMPILED )
set( @PROJECT_NAME_UPPER@_LIBRARIES "${@PROJECT_NAME_UPPER@_LIBRARY}" )

if( @PROJECT_NAME_UPPER@_LIBRARY )
  set( @PROJECT_NAME_UPPER@_FOUND true )
else( @PROJECT_NAME_UPPER@_LIBRARY )
  set( @PROJECT_NAME_UPPER@_FOUND false )
endif( @PROJECT_NAME_UPPER@_LIBRARY )
